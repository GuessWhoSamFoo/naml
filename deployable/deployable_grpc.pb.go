// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package deployable

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployableClient is the client API for Deployable service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployableClient interface {
	Install(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error)
	Uninstall(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error)
	Objects(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ObjectList, error)
}

type deployableClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployableClient(cc grpc.ClientConnInterface) DeployableClient {
	return &deployableClient{cc}
}

func (c *deployableClient) Install(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/deployable.Deployable/Install", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployableClient) Uninstall(ctx context.Context, in *Null, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/deployable.Deployable/Uninstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployableClient) Objects(ctx context.Context, in *Null, opts ...grpc.CallOption) (*ObjectList, error) {
	out := new(ObjectList)
	err := c.cc.Invoke(ctx, "/deployable.Deployable/Objects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployableServer is the server API for Deployable service.
// All implementations must embed UnimplementedDeployableServer
// for forward compatibility
type DeployableServer interface {
	Install(context.Context, *Null) (*Result, error)
	Uninstall(context.Context, *Null) (*Result, error)
	Objects(context.Context, *Null) (*ObjectList, error)
	mustEmbedUnimplementedDeployableServer()
}

// UnimplementedDeployableServer must be embedded to have forward compatible implementations.
type UnimplementedDeployableServer struct {
}

func (UnimplementedDeployableServer) Install(context.Context, *Null) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedDeployableServer) Uninstall(context.Context, *Null) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uninstall not implemented")
}
func (UnimplementedDeployableServer) Objects(context.Context, *Null) (*ObjectList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Objects not implemented")
}
func (UnimplementedDeployableServer) mustEmbedUnimplementedDeployableServer() {}

// UnsafeDeployableServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployableServer will
// result in compilation errors.
type UnsafeDeployableServer interface {
	mustEmbedUnimplementedDeployableServer()
}

func RegisterDeployableServer(s grpc.ServiceRegistrar, srv DeployableServer) {
	s.RegisterService(&Deployable_ServiceDesc, srv)
}

func _Deployable_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployableServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployable.Deployable/Install",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployableServer).Install(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployable_Uninstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployableServer).Uninstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployable.Deployable/Uninstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployableServer).Uninstall(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployable_Objects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Null)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployableServer).Objects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployable.Deployable/Objects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployableServer).Objects(ctx, req.(*Null))
	}
	return interceptor(ctx, in, info, handler)
}

// Deployable_ServiceDesc is the grpc.ServiceDesc for Deployable service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deployable_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deployable.Deployable",
	HandlerType: (*DeployableServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _Deployable_Install_Handler,
		},
		{
			MethodName: "Uninstall",
			Handler:    _Deployable_Uninstall_Handler,
		},
		{
			MethodName: "Objects",
			Handler:    _Deployable_Objects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deployable/deployable.proto",
}
